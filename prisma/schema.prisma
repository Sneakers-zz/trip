// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Crop {
  id                 String        @id @default(uuid())
  name               String?
  slug               String?
  binomialName       String?        @map("binomial_name")
  description        String?
  sunRequirements    String?       @map("sun_requirements")
  sowingMethod       String?       @map("sowing_method")
  spread             Int?
  rowSpacing         Int?          @map("row_spacing")
  height             Int?
  processingPictures Int?           @map("processing_pictures")
  guidesCount        Int?           @map("guides_count")
  mainImagePath      String?        @map("main_image_path")
  taxon              String?
  tagsArray          Json?         @map("tags_array") // Assuming your DB supports JSON.
  growingDegreeDays  Int?          @map("growing_degree_days")
  svgIcon            String ?       @map("svg_icon")
  pictures           Picture[]
  companions         Companion[]   @relation("CropCompanions")
  commonNames        CommonName[]  // Explicitly define the relation to CommonName
}

model CommonName {
  id     String @id @default(uuid())
  name   String
  cropId String
  Crop   Crop   @relation(fields: [cropId], references: [id]) // Ensure this matches the Crop model's reference
}

model Picture {
  id     String @id @default(uuid())
  cropId String
  Crop   Crop   @relation(fields: [cropId], references: [id])
}

model Companion {
  id     String   @id @default(uuid())
  cropId String
  Crop   Crop[]   @relation("CropCompanions")
}

model Plant {
  id             String   @id
  image          String
  name           String
  botanicalName  String
  sun            String?  // Made optional
  spread         Int
  rowSpace       Int
  details        String
}

model SensorData {
  id        Int      @id @default(autoincrement())
  chipId    Int
  water1    Int
  water2    Int
  water3    Int
  water4    Int
  tempC     Float
  tempF     Float
  uvLight   Float
  createdAt DateTime @default(now())
}

model Weather {
  id           Int    @id @default(autoincrement())
  temp         Float
  temp_min     Float
  temp_max     Float
  pressure     Int
  humidity     Int
  wind_speed   Int
  wind_deg     Int
  city_id      Int
  city         String
  country      String
  lon          Float
  lat          Float
  weather_code Int
  weather_icon String
  createdAt DateTime @default(now())
}